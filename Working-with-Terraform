
Mutable vs Immutable Infrastructure

Example of mutable infrastructure - the underlying infrastructure reamins the same, but the software and the configuration 
on these servers are changed as part of the update. This update can be trick because need to match the dependencies.
Example od immutable Infrastructure - We can create new webservers with the updated software version and then delete 
the old web server. If the upgrade fails for any reason. the old web server  will be left intact and the failed server will
be removed. Terraform use this approach making easier to version the infra and roll back/forward between versions

==============Lifecycle rule =======================
to update a resource, you use terraform apply and then terraform first delete the older version and then create a new file,
but this may not be a desirable approach in all cases, sometimes we need update first and then delete the old version or
we may no want the resource to be deleted at all.

in the resource block

lifecycle {
  create_before_destroy = true
}


to avoid to be delete like Database is good to use when you use terraform apply
prevent_destroy = true


============  Datasources =====================
https://registry.terraform.io/providers/hashicorp/local/latest/docs/data-sources/file

datasources allows terraform to read attributes from resources whcih are provisioned outside its control
Ex.: a bash script create a file in the same dir of the main.tf (configuration file)

  resource "local_file" "pet"  {
    filename = '/root/pets.txt'
    content = data.local_file.dog.content
  } 

data "local_file" "dog" {
    filename = '/root/dog.txt"
}    


Resource (managed resource) - create, update and destroy infra
Data source (data resources) - only reads infra


============ Meta Arguments ===========
Exemples - depends_on, lifecycle, count, for_each 

createmultiple instances of the same resource
can be used within any resource block to change the behavior or resource
the count argument when you delete some resources can create some conflits, unecessary delete resource, to sort this out use 
the meta argument for_each
for_each only works with a map or a set, so then the output wont be indentify by index like count whic create a list

-----count---------------
main.tf - conf file
 resource "local_file" "pet"  {
    filename = var.filename[count.index]
    count = lenght(var.filename)
 }
 
 variable.tf
 variable "filename"  {
    default = [
      "/root/pets.txt",
      "/root/dogs.txt",
      "/root/cats.txt"
    ]
 }

-----for_each---------------
main.tf - conf file
 resource "local_file" "pet"  {
    filename = each.value
    for_each=var.filename         type=list(string) -> for_each = toset(var.filename)
 } 
 
 variable.tf
 variable "filename"  {
    type=set(string)              type=list(string) -> for_each = toset(var.filename)
    default = [
      "/root/pets.txt",
      "/root/dogs.txt",
      "/root/cats.txt"
    ]
 }
 
 
 
